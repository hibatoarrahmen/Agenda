package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DepartementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartementAllPropertiesEquals(Departement expected, Departement actual) {
        assertDepartementAutoGeneratedPropertiesEquals(expected, actual);
        assertDepartementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartementAllUpdatablePropertiesEquals(Departement expected, Departement actual) {
        assertDepartementUpdatableFieldsEquals(expected, actual);
        assertDepartementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartementAutoGeneratedPropertiesEquals(Departement expected, Departement actual) {
        assertThat(expected)
            .as("Verify Departement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartementUpdatableFieldsEquals(Departement expected, Departement actual) {
        assertThat(expected)
            .as("Verify Departement relevant properties")
            .satisfies(e -> assertThat(e.getNum()).as("check num").isEqualTo(actual.getNum()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartementUpdatableRelationshipsEquals(Departement expected, Departement actual) {
        assertThat(expected)
            .as("Verify Departement relationships")
            .satisfies(e -> assertThat(e.getAgendaDept()).as("check agendaDept").isEqualTo(actual.getAgendaDept()))
            .satisfies(e -> assertThat(e.getEmploye()).as("check employe").isEqualTo(actual.getEmploye()));
    }
}
