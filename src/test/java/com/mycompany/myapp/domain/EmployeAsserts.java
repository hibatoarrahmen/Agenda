package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeAllPropertiesEquals(Employe expected, Employe actual) {
        assertEmployeAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeAllUpdatablePropertiesEquals(Employe expected, Employe actual) {
        assertEmployeUpdatableFieldsEquals(expected, actual);
        assertEmployeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeAutoGeneratedPropertiesEquals(Employe expected, Employe actual) {
        assertThat(expected)
            .as("Verify Employe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeUpdatableFieldsEquals(Employe expected, Employe actual) {
        assertThat(expected)
            .as("Verify Employe relevant properties")
            .satisfies(e -> assertThat(e.getNumEmploye()).as("check numEmploye").isEqualTo(actual.getNumEmploye()))
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getPrenom()).as("check prenom").isEqualTo(actual.getPrenom()))
            .satisfies(e -> assertThat(e.getTelIntern()).as("check telIntern").isEqualTo(actual.getTelIntern()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNiveau()).as("check niveau").isEqualTo(actual.getNiveau()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeUpdatableRelationshipsEquals(Employe expected, Employe actual) {
        assertThat(expected)
            .as("Verify Employe relationships")
            .satisfies(e -> assertThat(e.getAgenda()).as("check agenda").isEqualTo(actual.getAgenda()))
            .satisfies(e -> assertThat(e.getActiviteDepts()).as("check activiteDepts").isEqualTo(actual.getActiviteDepts()));
    }
}
