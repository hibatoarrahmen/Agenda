package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActiviteDeptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteDeptAllPropertiesEquals(ActiviteDept expected, ActiviteDept actual) {
        assertActiviteDeptAutoGeneratedPropertiesEquals(expected, actual);
        assertActiviteDeptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteDeptAllUpdatablePropertiesEquals(ActiviteDept expected, ActiviteDept actual) {
        assertActiviteDeptUpdatableFieldsEquals(expected, actual);
        assertActiviteDeptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteDeptAutoGeneratedPropertiesEquals(ActiviteDept expected, ActiviteDept actual) {
        assertThat(expected)
            .as("Verify ActiviteDept auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteDeptUpdatableFieldsEquals(ActiviteDept expected, ActiviteDept actual) {
        assertThat(expected)
            .as("Verify ActiviteDept relevant properties")
            .satisfies(e -> assertThat(e.getNumAct()).as("check numAct").isEqualTo(actual.getNumAct()))
            .satisfies(e -> assertThat(e.getTypeD()).as("check typeD").isEqualTo(actual.getTypeD()))
            .satisfies(e -> assertThat(e.getDescript()).as("check descript").isEqualTo(actual.getDescript()))
            .satisfies(e -> assertThat(e.getDateAct()).as("check dateAct").isEqualTo(actual.getDateAct()))
            .satisfies(e -> assertThat(e.gethDebut()).as("check hDebut").isEqualTo(actual.gethDebut()))
            .satisfies(e -> assertThat(e.gethFin()).as("check hFin").isEqualTo(actual.gethFin()))
            .satisfies(e -> assertThat(e.getDateCreation()).as("check dateCreation").isEqualTo(actual.getDateCreation()))
            .satisfies(e -> assertThat(e.getCreateur()).as("check createur").isEqualTo(actual.getCreateur()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteDeptUpdatableRelationshipsEquals(ActiviteDept expected, ActiviteDept actual) {
        assertThat(expected)
            .as("Verify ActiviteDept relationships")
            .satisfies(e -> assertThat(e.getProcesVerbal()).as("check procesVerbal").isEqualTo(actual.getProcesVerbal()))
            .satisfies(e -> assertThat(e.getEmployes()).as("check employes").isEqualTo(actual.getEmployes()));
    }
}
